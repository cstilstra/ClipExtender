#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ClipExtender
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Database1")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCopy(Copy instance);
    partial void UpdateCopy(Copy instance);
    partial void DeleteCopy(Copy instance);
    partial void InsertList(List instance);
    partial void UpdateList(List instance);
    partial void DeleteList(List instance);
    partial void InsertClipboardLine(ClipboardLine instance);
    partial void UpdateClipboardLine(ClipboardLine instance);
    partial void DeleteClipboardLine(ClipboardLine instance);
    partial void InsertListLine(ListLine instance);
    partial void UpdateListLine(ListLine instance);
    partial void DeleteListLine(ListLine instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::ClipExtender.Properties.Settings.Default.Database1ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Copy> Copies
		{
			get
			{
				return this.GetTable<Copy>();
			}
		}
		
		public System.Data.Linq.Table<List> Lists
		{
			get
			{
				return this.GetTable<List>();
			}
		}
		
		public System.Data.Linq.Table<ClipboardLine> ClipboardLines
		{
			get
			{
				return this.GetTable<ClipboardLine>();
			}
		}
		
		public System.Data.Linq.Table<ListLine> ListLines
		{
			get
			{
				return this.GetTable<ListLine>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Copies")]
	public partial class Copy : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Text;
		
		private System.DateTime _DateTime;
		
		private EntitySet<ClipboardLine> _ClipboardLines;
		
		private EntitySet<ListLine> _ListLines;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    partial void OnDateTimeChanging(System.DateTime value);
    partial void OnDateTimeChanged();
    #endregion
		
		public Copy()
		{
			this._ClipboardLines = new EntitySet<ClipboardLine>(new Action<ClipboardLine>(this.attach_ClipboardLines), new Action<ClipboardLine>(this.detach_ClipboardLines));
			this._ListLines = new EntitySet<ListLine>(new Action<ListLine>(this.attach_ListLines), new Action<ListLine>(this.detach_ListLines));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Text", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateTime", DbType="DateTime2 NOT NULL")]
		public System.DateTime DateTime
		{
			get
			{
				return this._DateTime;
			}
			set
			{
				if ((this._DateTime != value))
				{
					this.OnDateTimeChanging(value);
					this.SendPropertyChanging();
					this._DateTime = value;
					this.SendPropertyChanged("DateTime");
					this.OnDateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Copy_ClipboardLine", Storage="_ClipboardLines", ThisKey="Id", OtherKey="CopyId")]
		public EntitySet<ClipboardLine> ClipboardLines
		{
			get
			{
				return this._ClipboardLines;
			}
			set
			{
				this._ClipboardLines.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Copy_ListLine", Storage="_ListLines", ThisKey="Id", OtherKey="CopyId")]
		public EntitySet<ListLine> ListLines
		{
			get
			{
				return this._ListLines;
			}
			set
			{
				this._ListLines.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ClipboardLines(ClipboardLine entity)
		{
			this.SendPropertyChanging();
			entity.Copy = this;
		}
		
		private void detach_ClipboardLines(ClipboardLine entity)
		{
			this.SendPropertyChanging();
			entity.Copy = null;
		}
		
		private void attach_ListLines(ListLine entity)
		{
			this.SendPropertyChanging();
			entity.Copy = this;
		}
		
		private void detach_ListLines(ListLine entity)
		{
			this.SendPropertyChanging();
			entity.Copy = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Lists")]
	public partial class List : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<ListLine> _ListLines;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public List()
		{
			this._ListLines = new EntitySet<ListLine>(new Action<ListLine>(this.attach_ListLines), new Action<ListLine>(this.detach_ListLines));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="List_ListLine", Storage="_ListLines", ThisKey="Id", OtherKey="ListId")]
		public EntitySet<ListLine> ListLines
		{
			get
			{
				return this._ListLines;
			}
			set
			{
				this._ListLines.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ListLines(ListLine entity)
		{
			this.SendPropertyChanging();
			entity.List = this;
		}
		
		private void detach_ListLines(ListLine entity)
		{
			this.SendPropertyChanging();
			entity.List = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ClipboardLines")]
	public partial class ClipboardLine : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CopyId;
		
		private int _Id;
		
		private EntityRef<Copy> _Copy;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCopyIdChanging(int value);
    partial void OnCopyIdChanged();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    #endregion
		
		public ClipboardLine()
		{
			this._Copy = default(EntityRef<Copy>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CopyId", DbType="Int NOT NULL")]
		public int CopyId
		{
			get
			{
				return this._CopyId;
			}
			set
			{
				if ((this._CopyId != value))
				{
					if (this._Copy.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCopyIdChanging(value);
					this.SendPropertyChanging();
					this._CopyId = value;
					this.SendPropertyChanged("CopyId");
					this.OnCopyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Copy_ClipboardLine", Storage="_Copy", ThisKey="CopyId", OtherKey="Id", IsForeignKey=true)]
		public Copy Copy
		{
			get
			{
				return this._Copy.Entity;
			}
			set
			{
				Copy previousValue = this._Copy.Entity;
				if (((previousValue != value) 
							|| (this._Copy.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Copy.Entity = null;
						previousValue.ClipboardLines.Remove(this);
					}
					this._Copy.Entity = value;
					if ((value != null))
					{
						value.ClipboardLines.Add(this);
						this._CopyId = value.Id;
					}
					else
					{
						this._CopyId = default(int);
					}
					this.SendPropertyChanged("Copy");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ListLines")]
	public partial class ListLine : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ListId;
		
		private int _CopyId;
		
		private int _Id;
		
		private EntityRef<Copy> _Copy;
		
		private EntityRef<List> _List;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnListIdChanging(int value);
    partial void OnListIdChanged();
    partial void OnCopyIdChanging(int value);
    partial void OnCopyIdChanged();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    #endregion
		
		public ListLine()
		{
			this._Copy = default(EntityRef<Copy>);
			this._List = default(EntityRef<List>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ListId", DbType="Int NOT NULL")]
		public int ListId
		{
			get
			{
				return this._ListId;
			}
			set
			{
				if ((this._ListId != value))
				{
					if (this._List.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnListIdChanging(value);
					this.SendPropertyChanging();
					this._ListId = value;
					this.SendPropertyChanged("ListId");
					this.OnListIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CopyId", DbType="Int NOT NULL")]
		public int CopyId
		{
			get
			{
				return this._CopyId;
			}
			set
			{
				if ((this._CopyId != value))
				{
					if (this._Copy.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCopyIdChanging(value);
					this.SendPropertyChanging();
					this._CopyId = value;
					this.SendPropertyChanged("CopyId");
					this.OnCopyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Copy_ListLine", Storage="_Copy", ThisKey="CopyId", OtherKey="Id", IsForeignKey=true)]
		public Copy Copy
		{
			get
			{
				return this._Copy.Entity;
			}
			set
			{
				Copy previousValue = this._Copy.Entity;
				if (((previousValue != value) 
							|| (this._Copy.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Copy.Entity = null;
						previousValue.ListLines.Remove(this);
					}
					this._Copy.Entity = value;
					if ((value != null))
					{
						value.ListLines.Add(this);
						this._CopyId = value.Id;
					}
					else
					{
						this._CopyId = default(int);
					}
					this.SendPropertyChanged("Copy");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="List_ListLine", Storage="_List", ThisKey="ListId", OtherKey="Id", IsForeignKey=true)]
		public List List
		{
			get
			{
				return this._List.Entity;
			}
			set
			{
				List previousValue = this._List.Entity;
				if (((previousValue != value) 
							|| (this._List.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._List.Entity = null;
						previousValue.ListLines.Remove(this);
					}
					this._List.Entity = value;
					if ((value != null))
					{
						value.ListLines.Add(this);
						this._ListId = value.Id;
					}
					else
					{
						this._ListId = default(int);
					}
					this.SendPropertyChanged("List");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
